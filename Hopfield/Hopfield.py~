#!/usr/bin/python3


# made using this site
# http://www.cs.ucla.edu/~rosen/161/notes/hopfield.html


import numpy as np

def calcEngy(w,IN):

  energy=0
  size = len(IN)
  for i in range(size):
    for j in range(1,size-i):
      energy += w[i][j+i]*IN[i]*IN[j+i] 
 
  return -.5*energy


def makeADJMat(size,lists):
 

  w = np.zeros((size,size))
 

  #only useful for indexing corners of weight matrix
  #iu = np.triu_indices(size,1)
 
  # example of two networks
  # l1 = lists[0]
  # l2 = lists[1]
  # for i in range(size):
  #   for j in range(1,size-i):
  #     w[i][j+i] = ((2*l1[i]-1)*(2*l1[j+i]-1))+((2*l2[i]-1)*(2*l2[j+i]-1))
  #     w[j+i][i] = w[i][j+i]
  # print(w)
  # w = np.zeros((size,size))
 
  for l in lists:
    for i in range(size):
      for j in range(1,size-i):
        w[i][j+i] += ((2*l[i]-1)*(2*l[j+i]-1))
        w[j+i][i] = w[i][j+i]
 
  #print(w.shape)
  return w

##Hackish oneliner to make adjacency list not used yet. Although will be once my code is optimized :)
def makeAdjList(size,l1,l2):
  i,u = np.triu_indices(size,1)
  #print(i,u)
  return [(2*l1[x]-1)*(2*l1[y]-1)+(2*l2[x]-1)*(2*l2[y]-1) for x,y in zip(i,u)]

class HF:
  def __init__(self, NI, patterns):

    patters = np.array(patterns)

    self.w = makeADJMat(NI,patterns)


  def update(self,IN):


    #create random permutation of length of input
    order= np.random.permutation(len(IN))
    change = 1
    count = 0
    changes=[]
    while change != 0:
      change = 0

     

      print("Energy",calcEngy(self.w,IN))
     
      for x in order:


        energy= np.dot(self.w[x],IN)

        if energy < 0 and IN[x] != 0:
          change+=1
          IN[x]=0
        elif energy >= 0 and IN[x] !=1:
           change+=1
           IN[x]=1
      changes.append(change)
      count+=1
    return (IN,count,changes)

  def compare(self,p1,p2):
    return True if (p1==p2).all()  else False
=========
Here is a test program to exercise Hopfield above.
=========
#!/usr/bin/python3
#some code help from http://pmatigakis.wordpress.com/2014/01/18/character-recognition-using-hopfield-networks/
import numpy as np
import hopfield


def rowstr(row,row2):
  return ''.join('+' if e > 0 else '-' for e in row) + (' '*5) + ''.join('+' if e > 0 else '-' for e in row2)


def view(test,result):
  print("input","   ","output")
  img = (test > 0).astype(int).reshape((10,10))
  img2 = (result > 0).astype(int).reshape((10,10))
  print ('\n'.join([rowstr(row,row2) for row,row2 in zip(img,img2)]))
  print()

def test():
  #Some Test data
  #Create the training patterns
  a = np.array([[0,0,0,0,1,1,0,0,0,0],
                [0,0,0,1,0,0,1,0,0,0],
                [0,0,1,0,0,0,0,1,0,0],
                [0,1,0,0,0,0,0,0,1,0],
                [1,1,1,1,1,1,1,1,1,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1]])

  
  b = np.array([[1,1,1,1,1,1,1,1,1,0],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,1,1,1,1,1,1,1,1,0],
                #[0,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,0],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,1,1,1,1,1,1,1,1,0]])
  
  c = np.array([
                [1,1,1,1,1,1,1,1,1,1],
                [1,0,0,0,0,0,0,0,0,0],
                [1,0,0,0,0,0,0,0,0,0],
                [1,0,0,0,0,0,0,0,0,0],
                [1,0,0,0,0,0,0,0,0,0],
                [1,0,0,0,0,0,0,0,0,0],
                [1,0,0,0,0,0,0,0,0,0],
                [1,0,0,0,0,0,0,0,0,0],
                [1,0,0,0,0,0,0,0,0,0],
                [1,1,1,1,1,1,1,1,1,1]
                ])
  #really a Z
  # d = np.array([[1,1,1,1,1,1,1,1,1,1],
  #               [0,0,0,0,0,0,0,0,1,1],
  #               [0,0,0,0,0,0,0,1,1,0],
  #               [0,0,0,0,0,1,1,0,0,0],
  #               [0,0,0,0,0,1,0,0,0,0],
  #               [0,0,0,0,1,0,0,0,0,0],
  #               [0,0,0,1,1,0,0,0,0,0],
  #               [0,0,1,1,0,0,0,0,0,0],
  #               [0,1,1,0,0,0,0,0,0,0],
  #               [1,1,1,1,1,1,1,1,1,1]])

  d = np.array([[0,0,0,0,0,0,0,0,0,1],
                [0,0,0,0,0,0,0,0,0,1],
                [0,0,0,0,0,0,0,0,0,1],
                [0,0,0,0,0,0,0,0,0,1],
                [0,0,0,0,0,0,0,0,0,1],
                [0,1,1,1,1,1,1,1,1,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,0,0,0,0,0,0,0,0,1],
                [1,1,1,1,1,1,1,1,1,1]])

  ro = 10
  col = 10

  network = hopfield.HF(100,[a.flatten(),b.flatten(),c.flatten()])
    #d.flatten()]) 
  a_test =  a.flatten()#(a.flatten()*2)-1


  for i in range(5):
      p = np.random.randint(0, (ro*col))
      a_test[p] *= 0

  a_result,_,_ = network.update(a_test.copy())


  a_result.shape =(ro,col)
  a_test.shape = (ro,col)
  print("  ### A ###")
  view(a_test,a_result)

  b_test =  (b.flatten()*2)-1
  
  for i in range(4):
      p = np.random.randint(0, (ro*col))
      b_test[p] *= 0
      
  b_result,_,_ = network.update(b_test.copy())
  
  b_result.shape = (ro,col)
  b_test.shape = (ro,col)
 
  print("  ### B ###")
  view(b_test,b_result)

 
  c_test =  c.flatten()#(c.flatten()*2)-1
  
  for i in range(4):
      p = np.random.randint(0, (ro*col))
      c_test[p] *= 0
      
  c_result,_,_ = network.update(c_test.copy())
  
  c_result.shape = (ro,col)
  c_test.shape = (ro,col)
 
  print("  ### C ###")
  view(c_test,c_result)


  d_test = d.flatten()  #(d.flatten()*2)-1
  

  for i in range(4):
      p = np.random.randint(0, (ro*col))
      d_test[p] *= 0
      
  d_result,_,_ = network.update(d_test.copy())
  
  d_result.shape = (ro,col)
  d_test.shape = (ro,col)
 
  print("  ### D ###")
  view(d_test,d_result)


if __name__ == "__main__":
    test()





