Script started on Mon 30 Jun 2014 07:50:33 PM EDT
/cs5310$1pythonimmyjoe12345-HP-ENVY-TS-15-Notebook-PC:~/Documents/Dropbox/SCHOOL/
Python 2.7.6 |Anaconda 1.9.1 (64-bit)| (default, Jan 17 2014, 10:13:17)
[GCC 4.1.2 20080704 (Red Hat 4.1.2-54)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import numpy
import scip>>> import scipy
>>> import ipython
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: No module named ipython
>>>
/cs5310$1ipythonmmyjoe12345-HP-ENVY-TS-15-Notebook-PC:~/Documents/Dropbox/SCHOOL/
Python 2.7.6 |Anaconda 1.9.1 (64-bit)| (default, Jan 17 2014, 10:13:17)
Type "copyright", "credits" or "license" for more information.

IPython 1.1.0 -- An enhanced Interactive Python.
?	  -> Introduction and overview of IPython's features.
%quickref -> Quick reference.
help	  -> Python's own help system.
object?   -> Details about 'object', use 'object??' for extra details.

In [1]: import numpy

In [2]: import scipy

In [3]: a = arange(15).reshape(3,5)
---------------------------------------------------------------------------
NameError				  Traceback (most recent call last)
<ipython-input-3-9bd1385a4c5a> in <module>()
----> 1 a = arange(15).reshape(3,5)

NameError: name 'arange' is not defined

In [4]: from numpy import *

In [5]: a = arange(15).reshape(3,5)

In [6]: a
Out[6]:
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])

In [7]: a.shape
Out[7]: (3, 5)

In [8]: a.ndim
Out[8]: 2

In [9]: a.dtype.name
Out[9]: 'int64'

In [10]: a.itemsize
Out[10]: 8

In [11]: a.size
Out[11]: 15

In [12]: type(a)
Out[12]: numpy.ndarray

In [13]: b== array([6,7,8])

In [14]: b
Out[14]: array([6, 7, 8])

In [15]: type(b)
Out[15]: numpy.ndarray

In [16]:

In [16]:

In [16]: a = array([2,3,4])

In [17]: a
Out[17]: array([2, 3, 4])

In [18]: a.dtype
Out[18]: dtype('int64')

In [19]: dtype('int32')
Out[19]: dtype('int32')

In [20]: b=array([1.2,3.5,5.1])

In [21]: b.dtype
Out[21]: dtype('float64')

In [22]:

In [22]:

In [22]: a = array(1,2,3,4)
---------------------------------------------------------------------------
ValueError				  Traceback (most recent call last)
<ipython-input-22-57c2f8d6387a> in <module>()
----> 1 a = array(1,2,3,4)

ValueError: only 2 non-keyword arguments accepted

In [23]: a = array([1,2,3,4])

In [24]: b=array([(1.5,2,3),(4,5,6)])

In [25]: b
Out[25]:
array([[ 1.5,  2. ,  3. ],
       [ 4. ,  5. ,  6. ]])

In [26]: c=array([[1,2],[3,4],dtype=complex)
   ....: c
   ....: c
   ....: c = array([[1,2],[3,4]],dtype=complex)
   ....: c
   ....: ze
   ....: )
  File "<ipython-input-26-6043e2fd6243>", line 1
    c=array([[1,2],[3,4],dtype=complex)
			      ^
SyntaxError: invalid syntax


In [27]: c=array([[1,2],[3,4],dtype=complex)
c
c
c = array([[1,2],[3,4]],dtype=complex)
c

In [27]: b





c=array([[1,2],[3,4],dtype=complex)
c
c
c = array([[1,2],[3,4]],dtype=complex)
c

)
c
 = array([[1,2],[3,4]],dtype=complex)

c = array([[1,2],[3,4]],dtype=complex)


c = array([[1,2],[3,4]],dtype=complex)




In [28]: c
Out[28]:
array([[ 1.+0.j,  2.+0.j],
       [ 3.+0.j,  4.+0.j]])

In [29]:

In [29]: zeros((3,4))
Out[29]:
array([[ 0.,  0.,  0.,	0.],
       [ 0.,  0.,  0.,	0.],
       [ 0.,  0.,  0.,	0.]])

In [30]: ones((2,3,4),dtype=int16)
Out[30]:
array([[[1, 1, 1, 1],
	[1, 1, 1, 1],
	[1, 1, 1, 1]],

       [[1, 1, 1, 1],
	[1, 1, 1, 1],
	[1, 1, 1, 1]]], dtype=int16)

In [31]: empty((2,3))
Out[31]:
array([[  6.92004268e-310,   9.03909304e-317,	9.15593759e-317],
       [  8.84345095e-317,   8.89219349e-317,	8.84245492e-317]])

In [32]:

In [32]: arange(10,30,5)
Out[32]: array([10, 15, 20, 25])

In [33]: arange(0,2,.3)
Out[33]: array([ 0. ,  0.3,  0.6,  0.9,  1.2,  1.5,  1.8])

In [34]:

In [34]: linspace(0,2,9)
Out[34]: array([ 0.  ,	0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])

In [35]: x = linspace(0,2*pi,100)

In [36]: f=sin(x)

In [37]: f
Out[37]:
array([  0.00000000e+00,   6.34239197e-02,   1.26592454e-01,
	 1.89251244e-01,   2.51147987e-01,   3.12033446e-01,
	 3.71662456e-01,   4.29794912e-01,   4.86196736e-01,
	 5.40640817e-01,   5.92907929e-01,   6.42787610e-01,
	 6.90079011e-01,   7.34591709e-01,   7.76146464e-01,
	 8.14575952e-01,   8.49725430e-01,   8.81453363e-01,
	 9.09631995e-01,   9.34147860e-01,   9.54902241e-01,
	 9.71811568e-01,   9.84807753e-01,   9.93838464e-01,
	 9.98867339e-01,   9.99874128e-01,   9.96854776e-01,
	 9.89821442e-01,   9.78802446e-01,   9.63842159e-01,
	 9.45000819e-01,   9.22354294e-01,   8.95993774e-01,
	 8.66025404e-01,   8.32569855e-01,   7.95761841e-01,
	 7.55749574e-01,   7.12694171e-01,   6.66769001e-01,
	 6.18158986e-01,   5.67059864e-01,   5.13677392e-01,
	 4.58226522e-01,   4.00930535e-01,   3.42020143e-01,
	 2.81732557e-01,   2.20310533e-01,   1.58001396e-01,
	 9.50560433e-02,   3.17279335e-02,  -3.17279335e-02,
	-9.50560433e-02,  -1.58001396e-01,  -2.20310533e-01,
	-2.81732557e-01,  -3.42020143e-01,  -4.00930535e-01,
	-4.58226522e-01,  -5.13677392e-01,  -5.67059864e-01,
	-6.18158986e-01,  -6.66769001e-01,  -7.12694171e-01,
	-7.55749574e-01,  -7.95761841e-01,  -8.32569855e-01,
	-8.66025404e-01,  -8.95993774e-01,  -9.22354294e-01,
	-9.45000819e-01,  -9.63842159e-01,  -9.78802446e-01,
	-9.89821442e-01,  -9.96854776e-01,  -9.99874128e-01,
	-9.98867339e-01,  -9.93838464e-01,  -9.84807753e-01,
	-9.71811568e-01,  -9.54902241e-01,  -9.34147860e-01,
	-9.09631995e-01,  -8.81453363e-01,  -8.49725430e-01,
	-8.14575952e-01,  -7.76146464e-01,  -7.34591709e-01,
	-6.90079011e-01,  -6.42787610e-01,  -5.92907929e-01,
	-5.40640817e-01,  -4.86196736e-01,  -4.29794912e-01,
	-3.71662456e-01,  -3.12033446e-01,  -2.51147987e-01,
	-1.89251244e-01,  -1.26592454e-01,  -6.34239197e-02,
	-2.44929360e-16])

In [38]: x
Out[38]:
array([ 0.	  ,  0.06346652,  0.12693304,  0.19039955,  0.25386607,
	0.31733259,  0.38079911,  0.44426563,  0.50773215,  0.57119866,
	0.63466518,  0.6981317 ,  0.76159822,  0.82506474,  0.88853126,
	0.95199777,  1.01546429,  1.07893081,  1.14239733,  1.20586385,
	1.26933037,  1.33279688,  1.3962634 ,  1.45972992,  1.52319644,
	1.58666296,  1.65012947,  1.71359599,  1.77706251,  1.84052903,
	1.90399555,  1.96746207,  2.03092858,  2.0943951 ,  2.15786162,
	2.22132814,  2.28479466,  2.34826118,  2.41172769,  2.47519421,
	2.53866073,  2.60212725,  2.66559377,  2.72906028,  2.7925268 ,
	2.85599332,  2.91945984,  2.98292636,  3.04639288,  3.10985939,
	3.17332591,  3.23679243,  3.30025895,  3.36372547,  3.42719199,
	3.4906585 ,  3.55412502,  3.61759154,  3.68105806,  3.74452458,
	3.8079911 ,  3.87145761,  3.93492413,  3.99839065,  4.06185717,
	4.12532369,  4.1887902 ,  4.25225672,  4.31572324,  4.37918976,
	4.44265628,  4.5061228 ,  4.56958931,  4.63305583,  4.69652235,
	4.75998887,  4.82345539,  4.88692191,  4.95038842,  5.01385494,
	5.07732146,  5.14078798,  5.2042545 ,  5.26772102,  5.33118753,
	5.39465405,  5.45812057,  5.52158709,  5.58505361,  5.64852012,
	5.71198664,  5.77545316,  5.83891968,  5.9023862 ,  5.96585272,
	6.02931923,  6.09278575,  6.15625227,  6.21971879,  6.28318531])

In [39]:

In [39]: a = arange(6)

In [40]: print a
[0 1 2 3 4 5]

In [41]: b = arange(12).reshape(4,3)

In [42]: b
Out[42]:
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11]])

In [43]: print b
[[ 0  1  2]
 [ 3  4  5]
 [ 6  7  8]
 [ 9 10 11]]

In [44]: c = arange(24).reshape(2,3,4)

In [45]: print c
[[[ 0  1  2  3]
  [ 4  5  6  7]
  [ 8  9 10 11]]

 [[12 13 14 15]
  [16 17 18 19]
  [20 21 22 23]]]

In [46]: print arange(10000)
[   0	 1    2 ..., 9997 9998 9999]

In [47]: print arange(10000).reshape(100,100)
[[   0	  1    2 ...,	97   98   99]
 [ 100	101  102 ...,  197  198  199]
 [ 200	201  202 ...,  297  298  299]
 ...,
 [9700 9701 9702 ..., 9797 9798 9799]
 [9800 9801 9802 ..., 9897 9898 9899]
 [9900 9901 9902 ..., 9997 9998 9999]]

In [48]: #et_

In [49]: #set_printoptions(threshold='nan')

In [50]:

In [50]: a = array([20,30,40,50])

In [51]: b=arange(4)

In [52]: array([,0,1,2,3])
  File "<ipython-input-52-1e1e27eb90a6>", line 1
    array([,0,1,2,3])
	   ^
SyntaxError: invalid syntax


In [53]: ar([0,1,2,3])3])
Out[53]: array([0, 1, 2, 3])

In [54]: c = a-b

In [55]: c
Out[55]: array([20, 29, 38, 47])

In [56]: array([20,29,38,47])
Out[56]: array([20, 29, 38, 47])

In [57]: b**2
Out[57]: array([0, 1, 4, 9])

In [58]: 10*sin(a)
Out[58]: array([ 9.12945251, -9.88031624,  7.4511316 , -2.62374854])

In [59]: a < 35
Out[59]: array([ True,	True, False, False], dtype=bool)

In [60]: 77777777777

In [60]: A = arr)1,1],[0,1]]]]]

In [61]: B = array([[2,0],[3,4]])

In [62]: A*B
Out[62]:
array([[2, 0],
       [0, 4]])

In [63]: dot(A,B)
Out[63]:
array([[5, 4],
       [3, 4]])

In [64]:

In [64]: a = ones((2,3),dtype=int)

In [65]: b = random.random((2,3))

In [66]: a*= 3

In [67]: a
Out[67]:
array([[3, 3, 3],
       [3, 3, 3]])

In [68]: b += a

In [69]: b
Out[69]:
array([[ 3.69480459,  3.57373198,  3.88102085],
       [ 3.11718949,  3.36347651,  3.47572568]])

In [70]: a += b

In [71]: a
Out[71]:
array([[6, 6, 6],
       [6, 6, 6]])

In [72]:

In [72]: a = ones(3, dtype = int32)

In [73]: b = linspace(0,pi,3)

In [74]: b.dtype.name
Out[74]: 'float64'

In [75]: c = a+b

In [76]: c
Out[76]: array([ 1.	   ,  2.57079633,  4.14159265])

In [77]: d.=texp(c*1j)

In [78]: d
Out[78]:
array([ 0.54030231+0.84147098j, -0.84147098+0.54030231j,
       -0.54030231-0.84147098j])

In [79]: d.dtype.name
Out[79]: 'complex128'

In [80]:

In [80]: a = random.random((2,3))

In [81]: a.sum()
Out[81]: 2.6333126915583374

In [82]: a.min()
Out[82]: 0.28301198511822212

In [83]: a.max()
Out[83]: 0.82618798845238206

In [84]: b = arange(12_

In [84]: b = arange().reshap(3,4)))
---------------------------------------------------------------------------
AttributeError				  Traceback (most recent call last)
<ipython-input-84-b562f186fdcb> in <module>()
----> 1 b = arange(12).reshap(3,4)

AttributeError: 'numpy.ndarray' object has no attribute 'reshap'

In [85]: b = arange(12).reshape(3,4)

In [86]: b
Out[86]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

In [87]: b.sum(axis=0)
Out[87]: array([12, 15, 18, 21])

In [88]: b.min(axis=1)
Out[88]: array([0, 4, 8])

In [89]: b.cumsum(axis=1)
Out[89]:
array([[ 0,  1,  3,  6],
       [ 4,  9, 15, 22],
       [ 8, 17, 27, 38]])

In [90]:

In [90]: B = arange(3)

In [91]: B
Out[91]: array([0, 1, 2])

In [92]: exp(B)
Out[92]: array([ 1.	   ,  2.71828183,  7.3890561 ])

In [93]: sqrt(B)
Out[93]: array([ 0.	   ,  1.	,  1.41421356])

In [94]: C = array([2.,-1.,4.])

In [95]: add(B,C)
Out[95]: array([ 2.,  0.,  6.])

In [96]: a = arange(10)**3

In [97]: a
Out[97]: array([  0,   1,   8,	27,  64, 125, 216, 343, 512, 729])

In [98]: a[2]
Out[98]: 8

In [99]: a[2:5]
Out[99]: array([ 8, 27, 64])

In [100]: a[:6=--10001000

In [101]: a
Out[101]: array([-1000,     1, -1000,	 27, -1000,   125,   216,   343,   512,   729])

In [102]: a[::-1]
Out[102]: array([  729,   512,	 343,	216,   125, -1000,    27, -1000,     1, -1000])

In [103]: for i in a :
   .....:	  print i**(1/3),
   .....:
1 1 1 1 1 1 1 1 1 1

In [104]: for i in a :
	print i**(1/.),
   .....:
/home/timmyjoe12345/loopy/bin/ipython:2: RuntimeWarning: invalid value encountered in power
  if __name__ == '__main__':
nan 1.0 nan 3.0 nan 5.0 6.0 7.0 8.0 9.0

In [105]:

In [105]: def(f(x,y):
   .....:     return 10*x+y
   .....:

In [106]: b = fromfunction(f,(5,4),dtype=int)

In [107]: b
Out[107]:
array([[ 0,  1,  2,  3],
       [10, 11, 12, 13],
       [20, 21, 22, 23],
       [30, 31, 32, 33],
       [40, 41, 42, 43]])

In [108]: b[2,3]
Out[108]: 23

In [109]: b[0:5,1]
Out[109]: array([ 1, 11, 21, 31, 41])

In [110]: b[:,1]
Out[110]: array([ 1, 11, 21, 31, 41])

In [111]: b[1:3,:]
Out[111]:
array([[10, 11, 12, 13],
       [20, 21, 22, 23]])

In [112]: b[-1]
Out[112]: array([40, 41, 42, 43])

In [113]: b[-1,:]
Out[113]: array([40, 41, 42, 43])

In [114]: c =([[[0,1,2],[10,12,13]],[[100,101,102],[110,112,113]]])13]]])

In [115]: c.shape
Out[115]: (2, 2, 3)

In [116]: c[1,...]
Out[116]:
array([[100, 101, 102],
       [110, 112, 113]])

In [117]: c[...,2]
Out[117]:
array([[  2,  13],
       [102, 113]])

In [118]:

In [118]: for row in b:
   .....:     print row
   .....:
[0 1 2 3]
[10 11 12 13]
[20 21 22 23]
[30 31 32 33]
[40 41 42 43]

In [119]: for element in b.flat
  File "<ipython-input-119-e6a344f8dbfa>", line 1
    for element in b.flat
			 ^
SyntaxError: invalid syntax


In [120]: for element in b.flat:
   .....:     print element,
   .....:
0 1 2 3 10 11 12 13 20 21 22 23 30 31 32 33 40 41 42 43

In [121]: aa= floor(10*random.random((3,4)))

In [122]: a
Out[122]:
array([[ 5.,  4.,  9.,	6.],
       [ 8.,  3.,  9.,	6.],
       [ 1.,  9.,  8.,	2.]])

In [123]: a.shape
Out[123]: (3, 4)

In [124]: a.ravel()
Out[124]: array([ 5.,  4.,  9.,  6.,  8.,  3.,	9.,  6.,  1.,  9.,  8.,  2.])

In [125]: a.shape()
---------------------------------------------------------------------------
TypeError				  Traceback (most recent call last)
<ipython-input-125-c53f4e423b6d> in <module>()
----> 1 a.shape()

TypeError: 'tuple' object is not callable

In [126]: a.shape
Out[126]: (3, 4)

In [127]: a.transpose()
Out[127]:
array([[ 5.,  8.,  1.],
       [ 4.,  3.,  9.],
       [ 9.,  9.,  8.],
       [ 6.,  6.,  2.]])

In [128]: a

In [128]: a
Out[128]:
array([[ 5.,  4.,  9.,	6.],
       [ 8.,  3.,  9.,	6.],
       [ 1.,  9.,  8.,	2.]])

In [129]: a.resize((2,6))

In [130]: a
Out[130]:
array([[ 5.,  4.,  9.,	6.,  8.,  3.],
       [ 9.,  6.,  1.,	9.,  8.,  2.]])

In [131]: a = floor(10*random.random((2,2))
   .....: a
   .....: b = floor(10*random.random((2,3)))
   .....: b
   .....: vstack((a,b))
   .....:
   .....: )
  File "<ipython-input-131-9b18196e0faf>", line 2
    a
    ^
SyntaxError: invalid syntax


In [132]: vstack(a,b)
---------------------------------------------------------------------------
TypeError				  Traceback (most recent call last)
<ipython-input-132-629bcd18395e> in <module>()
----> 1 vstack(a,b)

TypeError: vstack() takes exactly 1 argument (2 given)

In [133]: vstack((a,b))
---------------------------------------------------------------------------
ValueError				  Traceback (most recent call last)
<ipython-input-133-0f9f576125a1> in <module>()
----> 1 vstack((a,b))

/home/timmyjoe12345/loopy/lib/python2.7/site-packages/numpy/core/shape_base.pyc in vstack(tup)
    226
    227     """
--> 228     return _nx.concatenate([atleast_2d(_m) for _m in tup], 0)
    229
    230 def hstack(tup):

ValueError: all the input array dimensions except for the concatenation axis must match exactly

In [134]: as=afloor(10*random.random((2,2))
a
b = floor(10*random.random((2,3)))
b
vstack((a,b))

In [134]:





.=efloor(10*random.random((2,2))
a
b = floor(10*random.random((2,3)))
b
vstack((a,b))

In [134]: vstack(a,b)





aa=bfloor(10*random.random((2,2)))

In [135]: a = floor(10*random.random((2,2)))

In [136]: a
Out[136]:
array([[ 8.,  3.],
       [ 5.,  1.]])

In [137]: b
Out[137]:
array([[ 2.,  8.],
       [ 3.,  9.]])

In [138]: vstack((
Display all 1079 possibilities? (y or n)

In [138]: vstack((a,b))
Out[138]:
array([[ 8.,  3.],
       [ 5.,  1.],
       [ 2.,  8.],
       [ 3.,  9.]])

In [139]: hstack((a,b))
Out[139]:
array([[ 8.,  3.,  2.,	8.],
       [ 5.,  1.,  3.,	9.]])

In [140]: column_stack((a,b))
Out[140]:
array([[ 8.,  3.,  2.,	8.],
       [ 5.,  1.,  3.,	9.]])

In [141]: a = array([4.,2.])

In [11@]: a = ar2.,8.]),2.])

In [143]: a[:,newaxis]
Out[143]:
array([[ 4.],
       [ 2.]])

In [144]: column_stack((a[:,newaxis],b[:newaxis]))
Out[144]:
array([[ 4.,  2.],
       [ 2.,  8.]])

In [145]: vstack((a[:newaxis],b[:newaxis]))
Out[145]:
array([[ 4.,  2.],
       [ 2.,  8.]])

In [146]: r_[1:4,0,4]
Out[146]: array([1, 2, 3, 0, 4])

In [147]: hsplit(a,3)
---------------------------------------------------------------------------
ValueError				  Traceback (most recent call last)
<ipython-input-147-d8bcb9918006> in <module>()
----> 1 hsplit(a,3)

/home/timmyjoe12345/loopy/lib/python2.7/site-packages/numpy/lib/shape_base.pyc in hsplit(ary, indices_or_sections)
    538 	return split(ary, indices_or_sections, 1)
    539     else:
--> 540 	return split(ary, indices_or_sections, 0)
    541
    542 def vsplit(ary, indices_or_sections):

/home/timmyjoe12345/loopy/lib/python2.7/site-packages/numpy/lib/shape_base.pyc in split(ary, indices_or_sections, axis)
    474 	N = ary.shape[axis]
    475 	if N % sections:
--> 476 	    raise ValueError('array split does not result in an equal division')
    477     res = array_split(ary, indices_or_sections, axis)
    478     return res

ValueError: array split does not result in an equal division

In [148]: a
Out[148]: array([ 4.,  2.])

In [149]: a = floor(10*random.random((2,12)))

In [150]: hsplit(a,3)
Out[150]:
[array([[ 8.,  9.,  2.,  9.],
       [ 9.,  4.,  5.,	0.]]),
 array([[ 5.,  9.,  8.,  6.],
       [ 3.,  7.,  5.,	9.]]),
 array([[ 2.,  8.,  0.,  4.],
       [ 6.,  7.,  7.,	7.]])]

In [151]: hsplit(a,(3,4))
Out[151]:
[array([[ 8.,  9.,  2.],
       [ 9.,  4.,  5.]]),
 array([[ 9.],
       [ 0.]]),
 array([[ 5.,  9.,  8.,  6.,  2.,  8.,	0.,  4.],
       [ 3.,  7.,  5.,	9.,  6.,  7.,  7.,  7.]])]

In [152]:

In [152]: a = arange(12)**2

In [153]: i = array([1,1,3,8,5])

In [154]: a[i]
Out[154]: array([ 1,  1,  9, 64, 25])

In [155]: j = array([[3,4],[9,7]])

In [156]: a[j]
Out[156]:
array([[ 9, 16],
       [81, 49]])

In [157]:

In [157]: palette = array([0,0,0],[255,0,0],[0,255,0],[0,0,255],[255,255,255]])
  File "<ipython-input-157-e4e13a52f2c1>", line 1
    palette = array([0,0,0],[255,0,0],[0,255,0],[0,0,255],[255,255,255]])
								       ^
SyntaxError: invalid syntax


In [158]: palette = array[0,0,0],[255,0,0],[0,255,0],[0,0,255],[255,255,255]])))

In [159]: image = array([[0,1,2,0],
   .....: [0,3,4,0]])

In [160]: palette[image]
Out[160]:
array([[[  0,	0,   0],
	[255,	0,   0],
	[  0, 255,   0],
	[  0,	0,   0]],

       [[  0,	0,   0],
	[  0,	0, 255],
	[255, 255, 255],
	[  0,	0,   0]]])

In [161]:

In [161]: a = arange(12).reshape(3,4)

In [162]: a
Out[162]:
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

In [163]: i = array([[0,1],[1,2]])

In [164]: j = array([[2,1],[3,3]])

In [165]: a[i,j]
Out[165]:
array([[ 2,  5],
       [ 7, 11]])

In [166]: a[i,2]
Out[166]:
array([[ 2,  6],
       [ 6, 10]])

In [167]: a[:,j]
Out[167]:
array([[[ 2,  1],
	[ 3,  3]],

       [[ 6,  5],
	[ 7,  7]],

       [[10,  9],
	[11, 11]]])

In [168]: l = [i,j]

In [169]: a[l]
Out[169]:
array([[ 2,  5],
       [ 7, 11]])

In [170]: s=array([i,j])

In [171]: a[s]
---------------------------------------------------------------------------
IndexError				  Traceback (most recent call last)
<ipython-input-171-b912f631cc75> in <module>()
----> 1 a[s]

IndexError: index 3 is out of bounds for axis 0 with size 3

In [172]: a[tuple(s)]
Out[172]:
array([[ 2,  5],
       [ 7, 11]])

In [173]:

In [173]: time = linspace(20,145,5)

In [174]: data = sin(arange(20)).reshap(5,4)
---------------------------------------------------------------------------
AttributeError				  Traceback (most recent call last)
<ipython-input-174-05fe3c45f824> in <module>()
----> 1 data = sin(arange(20)).reshap(5,4)

AttributeError: 'numpy.ndarray' object has no attribute 'reshap'

In [175]: data = sin(arange(20)).repe(5,4)))

In [176]: time
Out[176]: array([  20.	,   51.25,   82.5 ,  113.75,  145.  ])

In [177]: data
Out[177]:
array([[ 0.	   ,  0.84147098,  0.90929743,	0.14112001],
       [-0.7568025 , -0.95892427, -0.2794155 ,	0.6569866 ],
       [ 0.98935825,  0.41211849, -0.54402111, -0.99999021],
       [-0.53657292,  0.42016704,  0.99060736,	0.65028784],
       [-0.28790332, -0.96139749, -0.75098725,	0.14987721]])

In [178]: ind = data.argmax(axis=0)

In [179]: ind
Out[179]: array([2, 0, 3, 1])

In [180]: time_max = time[ind]

In [181]: data_max = data[ind, xrange(data.shape[1])]

In [182]: time_max
Out[182]: array([  82.5 ,   20.  ,  113.75,   51.25])

In [183]: data_max
Out[183]: array([ 0.98935825,  0.84147098,  0.99060736,  0.6569866 ])

In [184]: all(data_max == data.max(axis = 0))
Out[184]: True

In [185]:

In [185]: a = arange(5)

In [186]: a
Out[186]: array([0, 1, 2, 3, 4])

In [187]: a[[1,3,4]] = 0

In [188]: a
Out[188]: array([0, 0, 2, 0, 0])

In [189]:

In [189]: a = arange(5)

In [190]: a[[0,0,2[[=[1,2,3]
   .....: a
   .....:
   .....: ]
   .....: ]
   .....: )
   .....: a
   .....: ,a
   .....:
   .....: ]]]
  File "<ipython-input-190-e698fa3d6eec>", line 1
    a[[0,0,2[[=[1,2,3]
	      ^
SyntaxError: invalid syntax


In [191]: a[[0,0,2]]=[1,2,3]

In [192]: a
Out[192]: array([2, 1, 3, 3, 4])

In [193]:

In [193]: a = arange(5)

In [194]: a[[0,0,2]]+=1

In [195]: a
Out[195]: array([1, 1, 3, 3, 4])

In [196]:

In [196]: a = arange(12).reshape(3,4)

In [197]: b = a > 4

In [198]: b
Out[198]:
array([[False, False, False, False],
       [False,	True,  True,  True],
       [ True,	True,  True,  True]], dtype=bool)

In [199]: a[b]
Out[199]: array([ 5,  6,  7,  8,  9, 10, 11])

In [200]:

In [200]: a[b] = 0

In [201]: a
Out[201]:
array([[0, 1, 2, 3],
       [4, 0, 0, 0],
       [0, 0, 0, 0]])

In [202]:

I= arange(12).reshape(3,4)eshape(3,4)

In [203]: b1 = array([False,True,True])

In [204]: b2 = array([True,False,True,False])

In [205]: a[b1,:]
Out[205]:
array([[ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

In [206]: a[b1]
Out[206]:
array([[ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])

In [207]: a[:,b2]
Out[207]:
array([[ 0,  2],
       [ 4,  6],
       [ 8, 10]])

In [208]: a[b1,b2]
Out[208]: array([ 4, 10])

In [209]:

In [209]: a = array([2,3,4,5])

In [210]: b = array([8,5,4])

In [211]: c = array([5,4,6,8,3])

In [212]: ax,bx,cx = ix_(a,b,c)

In [213]: ax
Out[213]:
array([[[2]],

       [[3]],

       [[4]],

       [[5]]])

In [214]: bx
Out[214]:
array([[[8],
	[5],
	[4]]])

In [215]: cx
Out[215]: array([[[5, 4, 6, 8, 3]]])

In [216]: ax.shape,bx.shape,cx.shape
Out[216]: ((4, 1, 1), (1, 3, 1), (1, 1, 5))

In [217]: result ax+bx*cxcx

In [218]: result
Out[218]:
array([[[42, 34, 50, 66, 26],
	[27, 22, 32, 42, 17],
	[22, 18, 26, 34, 14]],

       [[43, 35, 51, 67, 27],
	[28, 23, 33, 43, 18],
	[23, 19, 27, 35, 15]],

       [[44, 36, 52, 68, 28],
	[29, 24, 34, 44, 19],
	[24, 20, 28, 36, 16]],

       [[45, 37, 53, 69, 29],
	[30, 25, 35, 45, 20],
	[25, 21, 29, 37, 17]]])

In [219]: result[3,2,4]
Out[219]: 17

In [220]: a[3]+b[2]*c[4]
Out[220]: 17

In [221]:

In [221]: def ufunc_reduce(ufct, *vectors):
   .....:     vs = ix_(*vectors)
   .....:     r = ufct.identity
   .....:     for v in vs:
   .....:	  r = ufct(r,v)
   .....:	  return r
   .....:

In [222]: ufunc_reduce(add,a,b,c)
Out[222]:
array([[[2]],

       [[3]],

       [[4]],

       [[5]]])

In [223]:

In [223]: from numpy.linalg import *

In [224]: a = array([1.0,2.0],[3.0,4.0]])
  File "<ipython-input-224-b36d3d813642>", line 1
    a = array([1.0,2.0],[3.0,4.0]])
				 ^
SyntaxError: invalid syntax


In [225]: a = array[1.0,2.0],[3.0,4.0]]))

In [226]: print a
[[ 1.  2.]
 [ 3.  4.]]

In [227]: a.transpose()
Out[227]:
array([[ 1.,  3.],
       [ 2.,  4.]])

In [228]: inv(a)
Out[228]:
array([[-2. ,  1. ],
       [ 1.5, -0.5]])

In [229]: u = eye(2)

In [230]: u
Out[230]:
array([[ 1.,  0.],
       [ 0.,  1.]])

In [231]: j = array],.[1.0,0.0]])

In [232]: dot(j,j)
Out[232]:
array([[-1.,  0.],
       [ 0., -1.]])

In [233]: trace(u)
Out[233]: 2.0

In [234]: y = array([[5.],[7.]])

In [235]: solve(a,y)
Out[235]:
array([[-3.],
       [ 4.]])

In [236]: eig(j)
Out[236]:
(array([ 0.+1.j,  0.-1.j]),
 array([[ 0.70710678+0.j	,  0.70710678-0.j	 ],
       [ 0.00000000-0.70710678j,  0.00000000+0.70710678j]]))

In [237]: Parameters:
   .....:     square matrix
   .....:
  File "<ipython-input-237-9afc9eb1a9ab>", line 1
    Parameters:
	      ^
SyntaxError: invalid syntax


In [238]: #Param:Square Matrix	 RETURNS: Eigenvalues according to multiplicity

In [239]: #eig(x)

In [240]:

In [240]: A = matrix('1.0,2.0; 3.0,4.0')

In [241]: A
Out[241]:
matrix([[ 1.,  2.],
	[ 3.,  4.]])

In [242]: type(A)
Out[242]: numpy.matrixlib.defmatrix.matrix

In [243]: A.T
Out[243]:
matrix([[ 1.,  3.],
	[ 2.,  4.]])

In [244]: X = matrix('5.0 7.0')

In [245]: Y = X.T

In [246]: Y
Out[246]:
matrix([[ 5.],
	[ 7.]])

In [247]: print A*Y
[[ 19.]
 [ 43.]]

In [248]: print A.I
[[-2.	1. ]
 [ 1.5 -0.5]]

In [249]: solve(A,Y)
Out[249]:
matrix([[-3.],
	[ 4.]])

In [250]:

In [250]: A = arange(12)

In [251]: A
Out[251]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])

In [252]: A.shape
Out[252]: (12,)

In [253]: M = mat(A.copy)

In [254]: print type(A), "     ", type(M)
<type 'numpy.ndarray'>	     <class 'numpy.matrixlib.defmatrix.matrix'>

In [255]: print A
[ 0  1	2  3  4  5  6  7  8  9 10 11]

In [256]: print M
[[<built-in method copy of numpy.ndarray object at 0xe112c0>]]

Mn=[mat(A.copy())ype(A), "     ", type(M)

In [258]: print M
[[ 0  1  2  3  4  5  6	7  8  9 10 11]]

In [259]:

In [259]: print A[:]; print A[:].shape
[ 0  1	2  3  4  5  6  7  8  9 10 11]
(12,)

print6M[:];rprint[M[:].shapeA[:].shape
[[ 0  1  2  3  4  5  6	7  8  9 10 11]]
(1, 12)

In [261]:

In [261]: print A[:,1];print[A:,1].shape
  File "<ipython-input-261-1441ee3916f8>", line 1
    print A[:,1];print[A:,1].shape
			^
SyntaxError: invalid syntax


In [262]: print A[:,1];printA[:,1].shape
---------------------------------------------------------------------------
IndexError				  Traceback (most recent call last)
<ipython-input-262-5517bbaa50d2> in <module>()
----> 1 print A[:,1];printA[:,1].shape

IndexError: too many indices

In [263]: print A[:,1];A[:,1].shapeshapee
---------------------------------------------------------------------------
IndexError				  Traceback (most recent call last)
<ipython-input-263-7b0e23462e35> in <module>()
----> 1 print A[:,1];print A[:,1].shape

IndexError: too many indices

In [264]: A[:,[1,3]]1];print A[:,1].shape
---------------------------------------------------------------------------
IndexError				  Traceback (most recent call last)
<ipython-input-264-76449b8b50f2> in <module>()
----> 1 A[:,[1,3]]

IndexError: too many indices

In [265]: import pylab

In [266]: mu, sigma, 2, .54
---------------------------------------------------------------------------
NameError				  Traceback (most recent call last)
<ipython-input-266-4ed093e74802> in <module>()
----> 1 mu, sigma, 2, .5

NameError: name 'mu' is not defined

In [267]: mu, sigma = 2,.5

In [268]: v = numpy.random.normal(mu,sigma,10000)

In [269]: pylab.hist(v,bins=50,normed=1)
Out[269]:
(array([ 0.00143467,  0.00143467,  0.00286935,	0.00430402,  0.0057387 ,
	0.00286935,  0.01291206,  0.00717337,  0.03012815,  0.04447489,
	0.05021358,  0.10186184,  0.11907792,  0.1477714 ,  0.15637944,
	0.24819856,  0.33284431,  0.31562823,  0.44331419,  0.46196495,
	0.58678156,  0.60399765,  0.62695243,  0.66855797,  0.76037709,
	0.78333187,  0.74029166,  0.81059067,  0.85076153,  0.75463839,
	0.67860068,  0.62408308,  0.57673885,  0.50643983,  0.46626897,
	0.38879659,  0.34145235,  0.24963323,  0.21663574,  0.15781411,
	0.13629401,  0.07603771,  0.07029901,  0.05738695,  0.03730152,
	0.02295478,  0.01865076,  0.02438945,  0.00860804,  0.01147739]),
 array([ 0.12751022,  0.19721248,  0.26691474,	0.336617  ,  0.40631925,
	0.47602151,  0.54572377,  0.61542603,  0.68512829,  0.75483055,
	0.8245328 ,  0.89423506,  0.96393732,  1.03363958,  1.10334184,
	1.17304409,  1.24274635,  1.31244861,  1.38215087,  1.45185313,
	1.52155538,  1.59125764,  1.6609599 ,  1.73066216,  1.80036442,
	1.87006667,  1.93976893,  2.00947119,  2.07917345,  2.14887571,
	2.21857797,  2.28828022,  2.35798248,  2.42768474,  2.497387  ,
	2.56708926,  2.63679151,  2.70649377,  2.77619603,  2.84589829,
	2.91560055,  2.9853028 ,  3.05500506,  3.12470732,  3.19440958,
	3.26411184,  3.33381409,  3.40351635,  3.47321861,  3.54292087,
	3.61262313]),
 <a list of 50 Patch objects>)

In [270]: pylab.show()

In [271]:

In [271]: (n,bins) = numpy.histogram(v,bins=50, normed=True)

In [272]: pylab.plot(.5*(bins[1:]+bins[:-1]),n)
Out[272]: [<matplotlib.lines.Line2D at 0x2a75590>]

In [273]: pylab.show()

In [274]:
Do you really want to exit ([y]/n)? y
310$yexit2345@timmyjoe12345-HP-ENVY-TS-15-Notebook-PC:~/Documents/Dropbox/SCHOOL/cs53

Script done on Mon 30 Jun 2014 11:39:50 PM EDT
